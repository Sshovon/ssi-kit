{"version":3,"sources":["../src/agent/issuer.ts","../src/agent/base.ts","../src/module/index.ts","../src/networks/bcovrin-test.ts","../src/lib/did.ts","../src/lib/init.ts"],"sourcesContent":["import { Agent, InitConfig } from \"@credo-ts/core\";\nimport { BaseAgent } from \"./base\";\nimport { AgentModule } from \"../module\";\nimport { agentDependencies } from \"@credo-ts/node\";\nimport { DidImportOptions, importDid, initAgent } from \"../lib\";\n\nexport class Issuer extends BaseAgent {\n\n    public constructor({\n        port,\n        label,\n        endpoints = [],\n        key,\n    }: {\n        port: number;\n        label: string;\n        endpoints: string[];\n        key: string;\n    }) {\n\n        const config = {\n            label,\n            walletConfig: {\n                id: `issuer-wallet-${label}`,\n                key,\n            },\n        } satisfies InitConfig\n        const agent = new Agent({\n            config,\n            dependencies: agentDependencies,\n            modules: AgentModule.IndyIssuer(),\n        })\n        super({ port, label, endpoints, agent, config });\n    }\n\n    public initialize: () => Promise<void> = initAgent\n\n    public importDidFromLedger: (options: DidImportOptions) => Promise<void> = importDid\n    protected proofListener(): void {\n        throw new Error(\"Method not implemented.\");\n    }\n    protected messageListener(): void {\n        throw new Error(\"Method not implemented.\");\n    }\n    protected credentialListener(): void {\n        throw new Error(\"Method not implemented.\");\n    }\n    protected connectionListener(): void {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n\n\nasync function main() {\n    const issuer = new Issuer({ port: 3001, label: 'issuer', endpoints: [], key: \"1234\" })\n    await issuer.initialize()\n    await issuer.importDidFromLedger({\n        did: 'did:indy:bcovrin:test:HTYnVHNExB8qjMh8otSz4X',\n        seed: 'ssiatm00000000000000000000000000'\n    })\n}\n\nmain()","import { Agent, DidRecord, HttpOutboundTransport, InitConfig, WalletConfig, WsOutboundTransport } from '@credo-ts/core';\nimport { agentDependencies, HttpInboundTransport } from '@credo-ts/node';\nimport { AgentModule } from '../module';\n\nexport type IndyAgentModule = Agent<ReturnType<typeof AgentModule.IndyIssuer>>;\nexport abstract class BaseAgent {\n    public port: number;\n    public label: string;\n    readonly config: InitConfig;\n    public endpoints: string[];\n    public agent: IndyAgentModule | Agent\n\n    public constructor({\n        port,\n        label,\n        endpoints = [],\n        agent,\n        config,\n    }: {\n        port: number;\n        label: string;\n        endpoints: string[];\n        agent: IndyAgentModule\n        config: InitConfig;\n    }) {\n        this.port = port;\n        this.label = label;\n        this.endpoints = endpoints;\n\n        this.config = config;\n        this.agent = agent\n\n        this.agent.registerInboundTransport(new HttpInboundTransport({  port }));\n        this.agent.registerOutboundTransport(new HttpOutboundTransport());\n        this.agent.registerOutboundTransport(new WsOutboundTransport());\n\n    }\n\n    abstract initialize(): Promise<void>;\n    protected abstract proofListener(): void;\n    protected abstract messageListener(): void;\n    protected abstract credentialListener(): void;\n    protected abstract connectionListener(): void;\n}\n","import { AnonCredsCredentialFormatService, AnonCredsModule, AnonCredsProofFormatService } from \"@credo-ts/anoncreds\";\nimport { AskarModule } from \"@credo-ts/askar\";\nimport { AutoAcceptCredential, AutoAcceptProof, ConnectionsModule, CredentialsModule, DidsModule, ProofsModule, V2CredentialProtocol, V2ProofProtocol } from \"@credo-ts/core\";\nimport { IndyVdrAnonCredsRegistry, IndyVdrIndyDidRegistrar, IndyVdrIndyDidResolver, IndyVdrModule } from \"@credo-ts/indy-vdr\";\nimport { anoncreds } from '@hyperledger/anoncreds-nodejs'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\nimport { indyVdr } from '@hyperledger/indy-vdr-nodejs'\nimport { BcovrinTestNetworkConfig } from \"../networks/bcovrin-test\";\n\n\nexport const AgentModule = {\n    IndyIssuer: function () {\n        return {\n            connections: new ConnectionsModule({\n                autoAcceptConnections: true,\n            }),\n            credentials: new CredentialsModule({\n                autoAcceptCredentials: AutoAcceptCredential.ContentApproved,\n                credentialProtocols: [\n                    new V2CredentialProtocol({\n                        credentialFormats: [new AnonCredsCredentialFormatService()],\n                    }),\n                ],\n            }),\n            indyVdr: new IndyVdrModule({\n                indyVdr,\n                networks: [BcovrinTestNetworkConfig],\n            }),\n            proofs: new ProofsModule({\n                autoAcceptProofs: AutoAcceptProof.ContentApproved,\n                proofProtocols: [\n                    new V2ProofProtocol({\n                        proofFormats: [new AnonCredsProofFormatService()],\n                    }),\n                ],\n            }),\n            anoncreds: new AnonCredsModule({\n                registries: [new IndyVdrAnonCredsRegistry()],\n                anoncreds,\n            }),\n            dids: new DidsModule({\n                registrars: [new IndyVdrIndyDidRegistrar()],\n                resolvers: [new IndyVdrIndyDidResolver()],\n            }),\n            askar: new AskarModule({\n                ariesAskar,\n            }),\n\n        } as const\n    }\n}","import { IndyVdrPoolConfig } from \"@credo-ts/indy-vdr\"\n\nconst bcovrin = `{\"reqSignature\":{},\"txn\":{\"data\":{\"data\":{\"alias\":\"Node1\",\"blskey\":\"4N8aUNHSgjQVgkpm8nhNEfDf6txHznoYREg9kirmJrkivgL4oSEimFF6nsQ6M41QvhM2Z33nves5vfSn9n1UwNFJBYtWVnHYMATn76vLuL3zU88KyeAYcHfsih3He6UHcXDxcaecHVz6jhCYz1P2UZn2bDVruL5wXpehgBfBaLKm3Ba\",\"blskey_pop\":\"RahHYiCvoNCtPTrVtP7nMC5eTYrsUA8WjXbdhNc8debh1agE9bGiJxWBXYNFbnJXoXhWFMvyqhqhRoq737YQemH5ik9oL7R4NTTCz2LEZhkgLJzB3QRQqJyBNyv7acbdHrAT8nQ9UkLbaVL9NBpnWXBTw4LEMePaSHEw66RzPNdAX1\",\"client_ip\":\"138.197.138.255\",\"client_port\":9702,\"node_ip\":\"138.197.138.255\",\"node_port\":9701,\"services\":[\"VALIDATOR\"]},\"dest\":\"Gw6pDLhcBcoQesN72qfotTgFa7cbuqZpkX3Xo6pLhPhv\"},\"metadata\":{\"from\":\"Th7MpTaRZVRYnPiabds81Y\"},\"type\":\"0\"},\"txnMetadata\":{\"seqNo\":1,\"txnId\":\"fea82e10e894419fe2bea7d96296a6d46f50f93f9eeda954ec461b2ed2950b62\"},\"ver\":\"1\"}\n{\"reqSignature\":{},\"txn\":{\"data\":{\"data\":{\"alias\":\"Node2\",\"blskey\":\"37rAPpXVoxzKhz7d9gkUe52XuXryuLXoM6P6LbWDB7LSbG62Lsb33sfG7zqS8TK1MXwuCHj1FKNzVpsnafmqLG1vXN88rt38mNFs9TENzm4QHdBzsvCuoBnPH7rpYYDo9DZNJePaDvRvqJKByCabubJz3XXKbEeshzpz4Ma5QYpJqjk\",\"blskey_pop\":\"Qr658mWZ2YC8JXGXwMDQTzuZCWF7NK9EwxphGmcBvCh6ybUuLxbG65nsX4JvD4SPNtkJ2w9ug1yLTj6fgmuDg41TgECXjLCij3RMsV8CwewBVgVN67wsA45DFWvqvLtu4rjNnE9JbdFTc1Z4WCPA3Xan44K1HoHAq9EVeaRYs8zoF5\",\"client_ip\":\"138.197.138.255\",\"client_port\":9704,\"node_ip\":\"138.197.138.255\",\"node_port\":9703,\"services\":[\"VALIDATOR\"]},\"dest\":\"8ECVSk179mjsjKRLWiQtssMLgp6EPhWXtaYyStWPSGAb\"},\"metadata\":{\"from\":\"EbP4aYNeTHL6q385GuVpRV\"},\"type\":\"0\"},\"txnMetadata\":{\"seqNo\":2,\"txnId\":\"1ac8aece2a18ced660fef8694b61aac3af08ba875ce3026a160acbc3a3af35fc\"},\"ver\":\"1\"}\n{\"reqSignature\":{},\"txn\":{\"data\":{\"data\":{\"alias\":\"Node3\",\"blskey\":\"3WFpdbg7C5cnLYZwFZevJqhubkFALBfCBBok15GdrKMUhUjGsk3jV6QKj6MZgEubF7oqCafxNdkm7eswgA4sdKTRc82tLGzZBd6vNqU8dupzup6uYUf32KTHTPQbuUM8Yk4QFXjEf2Usu2TJcNkdgpyeUSX42u5LqdDDpNSWUK5deC5\",\"blskey_pop\":\"QwDeb2CkNSx6r8QC8vGQK3GRv7Yndn84TGNijX8YXHPiagXajyfTjoR87rXUu4G4QLk2cF8NNyqWiYMus1623dELWwx57rLCFqGh7N4ZRbGDRP4fnVcaKg1BcUxQ866Ven4gw8y4N56S5HzxXNBZtLYmhGHvDtk6PFkFwCvxYrNYjh\",\"client_ip\":\"138.197.138.255\",\"client_port\":9706,\"node_ip\":\"138.197.138.255\",\"node_port\":9705,\"services\":[\"VALIDATOR\"]},\"dest\":\"DKVxG2fXXTU8yT5N7hGEbXB3dfdAnYv1JczDUHpmDxya\"},\"metadata\":{\"from\":\"4cU41vWW82ArfxJxHkzXPG\"},\"type\":\"0\"},\"txnMetadata\":{\"seqNo\":3,\"txnId\":\"7e9f355dffa78ed24668f0e0e369fd8c224076571c51e2ea8be5f26479edebe4\"},\"ver\":\"1\"}\n{\"reqSignature\":{},\"txn\":{\"data\":{\"data\":{\"alias\":\"Node4\",\"blskey\":\"2zN3bHM1m4rLz54MJHYSwvqzPchYp8jkHswveCLAEJVcX6Mm1wHQD1SkPYMzUDTZvWvhuE6VNAkK3KxVeEmsanSmvjVkReDeBEMxeDaayjcZjFGPydyey1qxBHmTvAnBKoPydvuTAqx5f7YNNRAdeLmUi99gERUU7TD8KfAa6MpQ9bw\",\"blskey_pop\":\"RPLagxaR5xdimFzwmzYnz4ZhWtYQEj8iR5ZU53T2gitPCyCHQneUn2Huc4oeLd2B2HzkGnjAff4hWTJT6C7qHYB1Mv2wU5iHHGFWkhnTX9WsEAbunJCV2qcaXScKj4tTfvdDKfLiVuU2av6hbsMztirRze7LvYBkRHV3tGwyCptsrP\",\"client_ip\":\"138.197.138.255\",\"client_port\":9708,\"node_ip\":\"138.197.138.255\",\"node_port\":9707,\"services\":[\"VALIDATOR\"]},\"dest\":\"4PS3EDQ3dW1tci1Bp6543CfuuebjFrg36kLAUcskGfaA\"},\"metadata\":{\"from\":\"TWwCRQRZ2ZHMJFn9TzLp7W\"},\"type\":\"0\"},\"txnMetadata\":{\"seqNo\":4,\"txnId\":\"aa5e817d7cc626170eca175822029339a444eb0ee8f0bd20d3b0b76e566fb008\"},\"ver\":\"1\"}`\n\nexport const BcovrinTestNetworkConfig = {\n  genesisTransactions: bcovrin,\n  indyNamespace: 'bcovrin:test',\n  isProduction: false,\n  connectOnStartup: true,\n} satisfies IndyVdrPoolConfig","import { KeyType, TypedArrayEncoder } from \"@credo-ts/core\";\nimport { Issuer } from \"../agent/issuer\";\n\nexport type DidImportOptions = {\n    did: string\n    seed: string\n}\nexport async function importDid(this: Issuer, options: DidImportOptions) {\n    try {\n        await this.agent.dids.import({\n            did: options.did,\n            privateKeys: [\n                {\n                    keyType: KeyType.Ed25519,\n                    privateKey: TypedArrayEncoder.fromString(options.seed),\n\n                }\n            ],\n            overwrite: true\n        })\n\n    } catch (e) {\n        throw new Error((e as Error).message)\n    }\n}","import { Issuer } from \"../agent/issuer\";\n\nexport async function initAgent(this: Issuer) {\n    try {\n        await this.agent.initialize();\n    } catch (e) {\n        throw new Error((e as Error).message)\n    }\n}"],"mappings":"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","names":["Agent","agentDependencies","Agent","agentDependencies"]}