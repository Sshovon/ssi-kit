{"version":3,"sources":["../index.ts","../src/agent/issuer.ts","../src/agent/base.ts","../src/module/index.ts","../src/networks/bcovrin-test.ts","../src/lib/did.ts","../src/lib/init.ts","../src/lib/schema.ts","../src/lib/cred-def.ts","../src/lib/credential.ts","../src/lib/proof.ts","../src/lib/listener.ts","../src/lib/connection.ts"],"sourcesContent":["export { Issuer } from \"./src/agent/issuer\";\nexport type * from './src/types'","import { Agent, InitConfig } from \"@credo-ts/core\";\nimport { BaseAgent } from \"./base\";\nimport { AgentModule } from \"../module\";\nimport { agentDependencies } from \"@credo-ts/node\";\nimport { connectionListener, createConnectionlessProofRequest, createCredentialDefinition, createInvitation, createSchema, credentialListener, getConnectionById, getCredentialDefinition, getCredentialExchangeRecord, getProofExchangeRecord, getSchema, importDid, initAgent, messageListener, offerCredential, proofListener } from \"../lib\";\nimport { ConnectionlessProofRequestOptions, ConnectionlessProofRequestResponse, CreateInvitationOptions, CreateInvitationResponse, CredentialDefinitionCreateOptions, CredentialDefinitionCreateResponse, DidImportOptions, DidImportResponse, GetConnectionByIdOptions, GetConnectionByIdResponse, GetCredentialDefinitionByIdOptions, GetCredentialDefinitionByIdResponse, GetCredentialExchangeRecordOptions, GetCredentialExchangeRecordResponse, GetProofExchangeRecordOptions, GetProofExchangeRecordResponse, GetSchemaByIdOptions, GetSchemaByIdResponse, OfferCredentialOptions, OfferCredentialResponse, SchemaCreateOptions, SchemaCreateResponse } from \"../types\";\n\nexport type IssuerAgentModule = Agent<ReturnType<typeof AgentModule.IndyIssuer>>;\nexport class Issuer extends BaseAgent {\n\n    public constructor({\n        port,\n        label,\n        endpoints = [],\n        key,\n    }: {\n        port: number;\n        label: string;\n        endpoints: string[];\n        key: string;\n    }) {\n\n        const config = {\n            label,\n            walletConfig: {\n                id: `issuer-wallet-${label}`,\n                key,\n            },\n            endpoints,\n        } satisfies InitConfig\n        const agent = new Agent({\n            config,\n            dependencies: agentDependencies,\n            modules: AgentModule.IndyIssuer(),\n        })\n        super({ port, label, endpoints, agent, config });\n    }\n\n    public initialize: () => Promise<void> = initAgent.bind(this)\n\n    // did\n    public importDidFromLedger: (options: DidImportOptions) => Promise<DidImportResponse> = importDid\n    // connection\n    public createConnectionInvitation: (options: CreateInvitationOptions) => Promise<CreateInvitationResponse> = createInvitation\n    public getConnectionById: (options: GetConnectionByIdOptions) => Promise<GetConnectionByIdResponse> = getConnectionById\n    // schema\n    public createSchema: (options: SchemaCreateOptions) => Promise<SchemaCreateResponse> = createSchema\n    public getSchemaById: (options: GetSchemaByIdOptions) => Promise<GetSchemaByIdResponse> = getSchema\n    // credential definition\n    public createCredentialDefinition: (options: CredentialDefinitionCreateOptions) => Promise<CredentialDefinitionCreateResponse> = createCredentialDefinition\n    public getCredentialDefinitionById: (options: GetCredentialDefinitionByIdOptions) => Promise<GetCredentialDefinitionByIdResponse> = getCredentialDefinition\n    // credential issuance\n    public issueCredential: (options: OfferCredentialOptions) => Promise<OfferCredentialResponse> = offerCredential\n    public getCredentialRecordById: (options: GetCredentialExchangeRecordOptions) => Promise<GetCredentialExchangeRecordResponse> = getCredentialExchangeRecord\n    // proof request\n    public createProofRequest: (options: ConnectionlessProofRequestOptions) => Promise<ConnectionlessProofRequestResponse> = createConnectionlessProofRequest\n    public getProofRecordById: (options: GetProofExchangeRecordOptions) => Promise<GetProofExchangeRecordResponse> = getProofExchangeRecord\n\n    protected proofListener: () => void = proofListener\n    protected messageListener: () => void = messageListener\n    protected credentialListener: () => void = credentialListener\n    protected connectionListener: () => void = connectionListener\n}\n\n\n","import { Agent, DidRecord, HttpOutboundTransport, InitConfig, WalletConfig, WsOutboundTransport } from '@credo-ts/core';\nimport { agentDependencies, HttpInboundTransport } from '@credo-ts/node';\nimport { AgentModule } from '../module';\n\nexport type IndyAgentModule = Agent<ReturnType<typeof AgentModule.IndyIssuer>>;\nexport abstract class BaseAgent {\n    protected port: number;\n    protected label: string;\n    protected readonly config: InitConfig;\n    public endpoints: string[];\n    protected agent: IndyAgentModule | Agent\n\n    public constructor({\n        port,\n        label,\n        endpoints = [],\n        agent,\n        config,\n    }: {\n        port: number;\n        label: string;\n        endpoints: string[];\n        agent: IndyAgentModule\n        config: InitConfig;\n    }) {\n        this.port = port;\n        this.label = label;\n        this.endpoints = endpoints;\n\n        this.config = config;\n        this.agent = agent\n\n        this.agent.registerInboundTransport(new HttpInboundTransport({ port }));\n        this.agent.registerOutboundTransport(new HttpOutboundTransport());\n        this.agent.registerOutboundTransport(new WsOutboundTransport());\n\n    }\n\n    abstract initialize(): Promise<void>;\n    protected abstract proofListener(): void;\n    protected abstract messageListener(): void;\n    protected abstract credentialListener(): void;\n    protected abstract connectionListener(): void;\n}\n","import { AnonCredsCredentialFormatService, AnonCredsModule, AnonCredsProofFormatService } from \"@credo-ts/anoncreds\";\nimport { AskarModule } from \"@credo-ts/askar\";\nimport { AutoAcceptCredential, AutoAcceptProof, ConnectionsModule, CredentialsModule, DidsModule, ProofsModule, V2CredentialProtocol, V2ProofProtocol } from \"@credo-ts/core\";\nimport { IndyVdrAnonCredsRegistry, IndyVdrIndyDidRegistrar, IndyVdrIndyDidResolver, IndyVdrModule } from \"@credo-ts/indy-vdr\";\nimport { anoncreds } from '@hyperledger/anoncreds-nodejs'\nimport { ariesAskar } from '@hyperledger/aries-askar-nodejs'\nimport { indyVdr } from '@hyperledger/indy-vdr-nodejs'\nimport { BcovrinTestNetworkConfig } from \"../networks/bcovrin-test\";\n\n\nexport const AgentModule = {\n    IndyIssuer: function () {\n        return {\n            connections: new ConnectionsModule({\n                autoAcceptConnections: true,\n            }),\n            credentials: new CredentialsModule({\n                autoAcceptCredentials: AutoAcceptCredential.ContentApproved,\n                credentialProtocols: [\n                    new V2CredentialProtocol({\n                        credentialFormats: [new AnonCredsCredentialFormatService()],\n                    }),\n                ],\n            }),\n            indyVdr: new IndyVdrModule({\n                indyVdr,\n                networks: [BcovrinTestNetworkConfig],\n            }),\n            proofs: new ProofsModule({\n                autoAcceptProofs: AutoAcceptProof.ContentApproved,\n                proofProtocols: [\n                    new V2ProofProtocol({\n                        proofFormats: [new AnonCredsProofFormatService()],\n                    }),\n                ],\n            }),\n            anoncreds: new AnonCredsModule({\n                registries: [new IndyVdrAnonCredsRegistry()],\n                anoncreds,\n            }),\n            dids: new DidsModule({\n                registrars: [new IndyVdrIndyDidRegistrar()],\n                resolvers: [new IndyVdrIndyDidResolver()],\n            }),\n            askar: new AskarModule({\n                ariesAskar,\n            }),\n\n        } as const\n    }\n}","import { IndyVdrPoolConfig } from \"@credo-ts/indy-vdr\"\n\nconst bcovrin = `{\"reqSignature\":{},\"txn\":{\"data\":{\"data\":{\"alias\":\"Node1\",\"blskey\":\"4N8aUNHSgjQVgkpm8nhNEfDf6txHznoYREg9kirmJrkivgL4oSEimFF6nsQ6M41QvhM2Z33nves5vfSn9n1UwNFJBYtWVnHYMATn76vLuL3zU88KyeAYcHfsih3He6UHcXDxcaecHVz6jhCYz1P2UZn2bDVruL5wXpehgBfBaLKm3Ba\",\"blskey_pop\":\"RahHYiCvoNCtPTrVtP7nMC5eTYrsUA8WjXbdhNc8debh1agE9bGiJxWBXYNFbnJXoXhWFMvyqhqhRoq737YQemH5ik9oL7R4NTTCz2LEZhkgLJzB3QRQqJyBNyv7acbdHrAT8nQ9UkLbaVL9NBpnWXBTw4LEMePaSHEw66RzPNdAX1\",\"client_ip\":\"138.197.138.255\",\"client_port\":9702,\"node_ip\":\"138.197.138.255\",\"node_port\":9701,\"services\":[\"VALIDATOR\"]},\"dest\":\"Gw6pDLhcBcoQesN72qfotTgFa7cbuqZpkX3Xo6pLhPhv\"},\"metadata\":{\"from\":\"Th7MpTaRZVRYnPiabds81Y\"},\"type\":\"0\"},\"txnMetadata\":{\"seqNo\":1,\"txnId\":\"fea82e10e894419fe2bea7d96296a6d46f50f93f9eeda954ec461b2ed2950b62\"},\"ver\":\"1\"}\n{\"reqSignature\":{},\"txn\":{\"data\":{\"data\":{\"alias\":\"Node2\",\"blskey\":\"37rAPpXVoxzKhz7d9gkUe52XuXryuLXoM6P6LbWDB7LSbG62Lsb33sfG7zqS8TK1MXwuCHj1FKNzVpsnafmqLG1vXN88rt38mNFs9TENzm4QHdBzsvCuoBnPH7rpYYDo9DZNJePaDvRvqJKByCabubJz3XXKbEeshzpz4Ma5QYpJqjk\",\"blskey_pop\":\"Qr658mWZ2YC8JXGXwMDQTzuZCWF7NK9EwxphGmcBvCh6ybUuLxbG65nsX4JvD4SPNtkJ2w9ug1yLTj6fgmuDg41TgECXjLCij3RMsV8CwewBVgVN67wsA45DFWvqvLtu4rjNnE9JbdFTc1Z4WCPA3Xan44K1HoHAq9EVeaRYs8zoF5\",\"client_ip\":\"138.197.138.255\",\"client_port\":9704,\"node_ip\":\"138.197.138.255\",\"node_port\":9703,\"services\":[\"VALIDATOR\"]},\"dest\":\"8ECVSk179mjsjKRLWiQtssMLgp6EPhWXtaYyStWPSGAb\"},\"metadata\":{\"from\":\"EbP4aYNeTHL6q385GuVpRV\"},\"type\":\"0\"},\"txnMetadata\":{\"seqNo\":2,\"txnId\":\"1ac8aece2a18ced660fef8694b61aac3af08ba875ce3026a160acbc3a3af35fc\"},\"ver\":\"1\"}\n{\"reqSignature\":{},\"txn\":{\"data\":{\"data\":{\"alias\":\"Node3\",\"blskey\":\"3WFpdbg7C5cnLYZwFZevJqhubkFALBfCBBok15GdrKMUhUjGsk3jV6QKj6MZgEubF7oqCafxNdkm7eswgA4sdKTRc82tLGzZBd6vNqU8dupzup6uYUf32KTHTPQbuUM8Yk4QFXjEf2Usu2TJcNkdgpyeUSX42u5LqdDDpNSWUK5deC5\",\"blskey_pop\":\"QwDeb2CkNSx6r8QC8vGQK3GRv7Yndn84TGNijX8YXHPiagXajyfTjoR87rXUu4G4QLk2cF8NNyqWiYMus1623dELWwx57rLCFqGh7N4ZRbGDRP4fnVcaKg1BcUxQ866Ven4gw8y4N56S5HzxXNBZtLYmhGHvDtk6PFkFwCvxYrNYjh\",\"client_ip\":\"138.197.138.255\",\"client_port\":9706,\"node_ip\":\"138.197.138.255\",\"node_port\":9705,\"services\":[\"VALIDATOR\"]},\"dest\":\"DKVxG2fXXTU8yT5N7hGEbXB3dfdAnYv1JczDUHpmDxya\"},\"metadata\":{\"from\":\"4cU41vWW82ArfxJxHkzXPG\"},\"type\":\"0\"},\"txnMetadata\":{\"seqNo\":3,\"txnId\":\"7e9f355dffa78ed24668f0e0e369fd8c224076571c51e2ea8be5f26479edebe4\"},\"ver\":\"1\"}\n{\"reqSignature\":{},\"txn\":{\"data\":{\"data\":{\"alias\":\"Node4\",\"blskey\":\"2zN3bHM1m4rLz54MJHYSwvqzPchYp8jkHswveCLAEJVcX6Mm1wHQD1SkPYMzUDTZvWvhuE6VNAkK3KxVeEmsanSmvjVkReDeBEMxeDaayjcZjFGPydyey1qxBHmTvAnBKoPydvuTAqx5f7YNNRAdeLmUi99gERUU7TD8KfAa6MpQ9bw\",\"blskey_pop\":\"RPLagxaR5xdimFzwmzYnz4ZhWtYQEj8iR5ZU53T2gitPCyCHQneUn2Huc4oeLd2B2HzkGnjAff4hWTJT6C7qHYB1Mv2wU5iHHGFWkhnTX9WsEAbunJCV2qcaXScKj4tTfvdDKfLiVuU2av6hbsMztirRze7LvYBkRHV3tGwyCptsrP\",\"client_ip\":\"138.197.138.255\",\"client_port\":9708,\"node_ip\":\"138.197.138.255\",\"node_port\":9707,\"services\":[\"VALIDATOR\"]},\"dest\":\"4PS3EDQ3dW1tci1Bp6543CfuuebjFrg36kLAUcskGfaA\"},\"metadata\":{\"from\":\"TWwCRQRZ2ZHMJFn9TzLp7W\"},\"type\":\"0\"},\"txnMetadata\":{\"seqNo\":4,\"txnId\":\"aa5e817d7cc626170eca175822029339a444eb0ee8f0bd20d3b0b76e566fb008\"},\"ver\":\"1\"}`\n\nexport const BcovrinTestNetworkConfig = {\n  genesisTransactions: bcovrin,\n  indyNamespace: 'bcovrin:test',\n  isProduction: false,\n  connectOnStartup: true,\n} satisfies IndyVdrPoolConfig","import { KeyType, TypedArrayEncoder } from \"@credo-ts/core\";\nimport { Issuer } from \"../agent/issuer\";\nimport { DidImportOptions, DidImportResponse } from \"../types\";\n\nexport async function importDid(this: Issuer, options: DidImportOptions): Promise<DidImportResponse> {\n    try {\n        await this.agent.dids.import({\n            did: options.did,\n            privateKeys: [\n                {\n                    keyType: KeyType.Ed25519,\n                    privateKey: TypedArrayEncoder.fromString(options.seed),\n\n                }\n            ],\n            overwrite: true\n        })\n\n        return {\n            success: true\n        }\n\n    } catch (e) {\n        return {\n            success: false,\n            message: (e as Error).message\n        }\n    }\n}","import { Issuer } from \"../agent/issuer\";\n\nexport async function initAgent(this: Issuer) {\n    try {\n        await this.agent.initialize();\n        console.log(`Agent ${this.agent.config.label} is initialized on port ${this.port}`);\n        this.proofListener();\n        this.messageListener();\n        this.credentialListener();\n        this.connectionListener();\n\n    } catch (e) {\n        throw new Error((e as Error).message)\n    }\n}","import { IndyVdrRegisterSchemaOptions } from \"@credo-ts/indy-vdr\";\nimport { Issuer, IssuerAgentModule } from \"../agent/issuer\";\nimport { GetSchemaByIdOptions, GetSchemaByIdResponse, SchemaCreateOptions, SchemaCreateResponse } from \"../types\";\n\n// only support internal endorsement\nexport async function createSchema(this: Issuer, options: SchemaCreateOptions): Promise<SchemaCreateResponse> {\n    try {\n        const response = await (this.agent as IssuerAgentModule).modules.anoncreds.registerSchema<IndyVdrRegisterSchemaOptions>({\n            schema: {\n                name: options.name,\n                version: options.version,\n                attrNames: options.attributes,\n                issuerId: options.did,\n            },\n            options: {\n                endorserMode: 'internal',\n                endorserDid: options.did,\n            }\n        })\n        return {\n            schemaId: response.schemaState.schemaId,\n            state: response.schemaState.state,\n            schema: response.schemaState.schema\n        }\n\n    } catch (e) {\n        throw new Error((e as Error).message)\n    }\n}\n\nexport async function getSchema(this: Issuer, options: GetSchemaByIdOptions): Promise<GetSchemaByIdResponse> {\n    try {\n        const response = await (this.agent as IssuerAgentModule).modules.anoncreds.getSchema(options.schemaId)\n        return {\n            schemaId: response.schemaId,\n            schema: response.schema\n        }\n    } catch (e) {\n        throw new Error((e as Error).message)\n    }\n}","import { IndyVdrRegisterCredentialDefinitionOptions } from \"@credo-ts/indy-vdr\";\nimport { Issuer, IssuerAgentModule } from \"../agent/issuer\";\nimport { CredentialDefinitionCreateOptions, CredentialDefinitionCreateResponse, GetCredentialDefinitionByIdOptions, GetCredentialDefinitionByIdResponse } from \"../types\";\n\n// only support internal endorsement\nexport async function createCredentialDefinition(this: Issuer, options: CredentialDefinitionCreateOptions): Promise<CredentialDefinitionCreateResponse> {\n    try {\n        const response = await (this.agent as IssuerAgentModule).modules.anoncreds.registerCredentialDefinition<IndyVdrRegisterCredentialDefinitionOptions>({\n            credentialDefinition: {\n                schemaId: options.schemaId,\n                tag: options.tag,\n                issuerId: options.did\n\n            },\n            options: {\n                endorserMode: 'internal',\n                endorserDid: options.did,\n                supportRevocation: false\n            }\n        })\n        return {\n            credentialDefinitionId: response.credentialDefinitionState.credentialDefinitionId,\n            state: response.credentialDefinitionState.state\n        }\n\n    } catch (e) {\n        throw new Error((e as Error).message)\n    }\n}\n\n\nexport async function getCredentialDefinition(this: Issuer, options: GetCredentialDefinitionByIdOptions): Promise<GetCredentialDefinitionByIdResponse> {\n    try {\n        const response = await (this.agent as IssuerAgentModule).modules.anoncreds.getCredentialDefinition(options.credentialDefinitionId)\n        return {\n            credentialDefinitionId: response.credentialDefinitionId,\n            credentialDefinition: response.credentialDefinition\n        }\n    } catch (e) {\n        throw new Error((e as Error).message)\n    }\n}\n","import { CredentialExchangeRecord, LinkedAttachment } from \"@credo-ts/core\"\nimport { Issuer, IssuerAgentModule } from \"../agent/issuer\"\nimport { GetCredentialExchangeRecordOptions, GetCredentialExchangeRecordResponse, OfferCredentialOptions, OfferCredentialResponse } from \"../types\"\n// anoncreds credential\nexport async function offerCredential(this: Issuer, options: OfferCredentialOptions): Promise<OfferCredentialResponse> {\n    try {\n        const response = await (this.agent as IssuerAgentModule).credentials.offerCredential({\n            connectionId: options.connectionId,\n            protocolVersion: 'v2',\n            credentialFormats: {\n                anoncreds: {\n                    attributes: options.attributes,\n                    credentialDefinitionId: options.credentialDefinitionId,\n                    linkedAttachments: options.linkedAttachments\n                }\n            }\n        })\n        return {\n            credentialExchangeRecordId: response.id,\n            state: response.state\n        }\n    } catch (e) {\n        throw new Error((e as Error).message)\n    }\n}\n\n\nexport async function getCredentialExchangeRecord(this: Issuer, options: GetCredentialExchangeRecordOptions): Promise<GetCredentialExchangeRecordResponse> {\n    try {\n        const response = await (this.agent as IssuerAgentModule).credentials.getById(options.credentialExchangeRecordId)\n        return response\n    } catch (e) {\n        throw new Error((e as Error).message)\n    }\n}","import { Issuer } from \"../agent/issuer\";\nimport { ConnectionlessProofRequestOptions, ConnectionlessProofRequestResponse, GetProofExchangeRecordOptions, GetProofExchangeRecordResponse, ProofRequestCreateOptions, ProofRequestCreateResponse } from \"../types\";\n\nexport async function createProofRequest(this: Issuer, options: ProofRequestCreateOptions): Promise<ProofRequestCreateResponse> {\n    try {\n\n        const proofConfig: any = {\n            name: options.presentationRequestLabel,\n            version: options.presentationRequestVersion,\n        }\n        if (options.requested_attributes) {\n            proofConfig.requestedAttributes = options.requested_attributes\n        }\n        if (options.requested_predicates) {\n            proofConfig.requestedPredicates = options.requested_predicates\n        }\n        if (options.non_revoked) {\n            proofConfig.nonRevoked = options.non_revoked\n        }\n        const response = await this.agent.proofs.requestProof({\n            protocolVersion: 'v2',\n            connectionId: options.connectionId,\n            proofFormats: {\n                anoncreds: proofConfig\n            },\n        });\n        return {\n            presentationExchangeRecordId: response.id,\n            state: response.state,\n        }\n\n    } catch (e) {\n        throw new Error((e as Error).message)\n    }\n}\n\n\nexport async function createConnectionlessProofRequest(this: Issuer, options: ConnectionlessProofRequestOptions): Promise<ConnectionlessProofRequestResponse> {\n    try {\n        const proofConfig: any = {\n            name: options.presentationRequestLabel,\n            version: options.presentationRequestVersion,\n        }\n        if (options.requested_attributes) {\n            proofConfig.requestedAttributes = options.requested_attributes\n        }\n        if (options.requested_predicates) {\n            proofConfig.requestedPredicates = options.requested_predicates\n        }\n        if (options.non_revoked) {\n            proofConfig.nonRevoked = options.non_revoked\n        }\n        const { message, proofRecord } = await this.agent.proofs.createRequest({\n            protocolVersion: 'v2',\n            proofFormats: {\n                anoncreds: proofConfig\n            },\n        });\n\n        const oobInvitationRecord = await this.agent.oob.createInvitation({\n            alias: options.alias,\n            label: options.label,\n            handshake: false,\n            messages: [message],\n        })\n\n        const invitationUrl = oobInvitationRecord.outOfBandInvitation.toUrl({\n            domain: options.domain\n        })\n        const invitationJson = oobInvitationRecord.outOfBandInvitation.toJSON()\n\n        return {\n            presentationExchangeRecordId: proofRecord.id,\n            invitationJson,\n            state: proofRecord.state,\n            invitationUrl\n        }\n\n    } catch (e) {\n        throw new Error((e as Error).message)\n    }\n}\n\n\nexport async function getProofExchangeRecord(this: Issuer, options: GetProofExchangeRecordOptions): Promise<GetProofExchangeRecordResponse> {\n    try {\n        const response = await this.agent.proofs.getById(options.presentationExchangeRecordId)\n        return {\n            presentationExchangeRecordId: response.id,\n            state: response.state,\n            isVerified: response.isVerified ?? false,\n            record: response\n\n        }\n    } catch (e) {\n        throw new Error((e as Error).message)\n    }\n}","import { BasicMessageEventTypes, BasicMessageRole, BasicMessageStateChangedEvent, ConnectionEventTypes, ConnectionStateChangedEvent, CredentialEventTypes, CredentialState, CredentialStateChangedEvent, DidExchangeState, ProofEventTypes, ProofState, ProofStateChangedEvent } from \"@credo-ts/core\";\nimport { BaseAgent } from \"../agent/base\";\n\nexport function proofListener(this: BaseAgent) {\n    console.log(`ProofListener is started on ${this.agent.config.label}`);\n    this.agent.events.on<ProofStateChangedEvent>(ProofEventTypes.ProofStateChanged, async (event) => {\n        console.log('ProofStateChangedEvent', event.payload.proofRecord.state);\n        const verificationWebhookTiggerLogic = event.payload.proofRecord.state === ProofState.Done || event.payload.proofRecord.state === ProofState.Declined || event.payload.proofRecord.state === ProofState.Abandoned;\n        if (verificationWebhookTiggerLogic) {\n            // const webhookFindResults = await this.webhookDb.findAllData(tenantId);\n            // await sendWebhookEvents(\n            //     {\n            //         webhookFindResult: webhookFindResults,\n            //         body: {\n            //             type: 'ProofState',\n            //             payload: event.payload,\n            //         },\n            //         logger: this.logger,\n            //         retryOptions: { maxRetries: 3, retryDelayMs: 1000 },\n            //     }\n            // );\n        }\n    });\n}\nexport function messageListener(this: BaseAgent) {\n    console.log(`MessageListener is started on ${this.agent.config.label}`);\n    this.agent.events.on(\n        BasicMessageEventTypes.BasicMessageStateChanged,\n        async (event: BasicMessageStateChangedEvent) => {\n            console.log('BasicMessageStateChangedEvent', event.payload.basicMessageRecord.role);\n            if (event.payload.basicMessageRecord.role === BasicMessageRole.Receiver) {\n                // const webhookFindResults = await this.webhookDb.findAllData(tenantId);\n                // await sendWebhookEvents(\n                //     {\n                //         webhookFindResult: webhookFindResults,\n                //         body: {\n                //             type: 'BasicMessageState',\n                //             payload: event.payload,\n                //         },\n                //         logger: this.logger,\n                //         retryOptions: { maxRetries: 3, retryDelayMs: 1000 },\n                //     }\n                // )\n            }\n        },\n    );\n}\nexport function credentialListener(this: BaseAgent) {\n    console.log(`CredentialListener is started on ${this.agent.config.label}`);\n    this.agent.events.on<CredentialStateChangedEvent>(\n        CredentialEventTypes.CredentialStateChanged,\n        async (event) => {\n            console.log('CredentialStateChangedEvent', event.payload.credentialRecord.state);\n            // const issueWebhookTiggerLogic = event.payload.credentialRecord.state === CredentialState.Abandoned || event.payload.credentialRecord.state === CredentialState.Done || event.payload.credentialRecord.state === CredentialState.Declined;\n            // if (issueWebhookTiggerLogic) {\n            //     const webhookFindResults = await this.webhookDb.findAllData(tenantId);\n            //     await sendWebhookEvents(\n            //         {\n            //             webhookFindResult: webhookFindResults,\n            //             body: {\n            //                 type: 'CredentialState',\n            //                 payload: event.payload,\n            //             },\n            //             logger: this.logger,\n            //             retryOptions: { maxRetries: 3, retryDelayMs: 1000 },\n            //         }\n            //     )\n            // }\n        },\n    );\n}\nexport function connectionListener(this: BaseAgent) {\n    console.log(`ConnectionListener is started on ${this.agent.config.label}`);\n    this.agent.events.on<ConnectionStateChangedEvent>(ConnectionEventTypes.ConnectionStateChanged, async (event) => {\n        console.log('ConnectionStateChangedEvent', event.payload.connectionRecord.state);\n        const connectionWebhookTiggerLogic = event.payload.connectionRecord.state === DidExchangeState.Abandoned || event.payload.connectionRecord.state === DidExchangeState.Completed\n        // if (connectionWebhookTiggerLogic) {\n        //     const webhookFindResults = await this.webhookDb.findAllData(tenantId);\n        //     await sendWebhookEvents(\n        //         {\n        //             webhookFindResult: webhookFindResults,\n        //             body: {\n        //                 type: 'ConnectionState',\n        //                 payload: event.payload,\n        //             },\n        //             logger: this.logger,\n        //             retryOptions: { maxRetries: 3, retryDelayMs: 1000 },\n        //         }\n        //     )\n        // }\n    });\n}","import { Issuer } from \"../agent/issuer\";\nimport { ConnectionRecord } from \"@credo-ts/core\";\nimport { CreateInvitationOptions, CreateInvitationResponse, GetConnectionByIdOptions, GetConnectionByIdResponse } from \"../types\";\n\nexport async function createInvitation(this: Issuer, options: CreateInvitationOptions): Promise<CreateInvitationResponse> {\n    try {\n        const response = await this.agent.oob.createInvitation({\n            alias: options.alias ?? this.label,\n            label: options.label ?? this.label,\n            multiUseInvitation: options.reusable ?? false,\n        });\n        return {\n            invitationUrl: response.outOfBandInvitation.toUrl({ domain: this.agent.config.endpoints[0] }),\n            invitationJson: response.outOfBandInvitation.toJSON(),\n            oobId: response.id,\n        }\n    }\n    catch (e) {\n        throw new Error((e as Error).message);\n    }\n}\n\n\n\nexport async function getConnectionById(this: Issuer, options: GetConnectionByIdOptions): Promise<GetConnectionByIdResponse> {\n    try {\n        if (options.connectionId) {\n            const record = await this.agent.connections.getById(options.connectionId);\n            return { record };\n        }\n        else if (options.oobId) {\n            const [record] = await this.agent.connections.findAllByOutOfBandId(options.oobId);\n            return { record };\n        }\n        throw new Error('Either connectionId or oobId must be provided');\n    }\n    catch (e) {\n        throw new Error((e as Error).message);\n    }\n}\n\n"],"mappings":"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","names":["import_core","import_core","import_node","import_core","import_core"]}